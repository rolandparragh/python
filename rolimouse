import tkinter
from tkinter import *
from tkinter import ttk
import pyautogui
import threading
import time
#window
root = Tk()
root.title('RoliMouse')
root.geometry("400x400")

#getting the mouse position and converting to int

position1int = pyautogui.position().x
position2int = pyautogui.position().y
timer_input =tkinter.IntVar()
timer =timer_input
running= False


def set():
#using the running as global variabel
    global running
    running = True
    my_progress.start(timer_input.get() * 10)
    print(running)
#creating thread and starting it
    move_thread =threading.Thread(target=move_mouse_with_delay)
    move_thread.start()
#stop button function
def stop():
    global running
    value =my_progress['value']
    my_progress.stop()
    my_progress['value'] = value
    running = False
    print(running)

#reset function
def reset():
    global running
    my_progress.stop()
    running = False
    print(running)

#progress bar creation
my_progress = ttk.Progressbar(root, orient=HORIZONTAL, length = 300, mode='determinate')

#input box and lable
duration_label = tkinter.Label(root, text="Duration:")
duration =tkinter.Entry(root,textvariable=timer_input)
#buttons
set_button =Button(root,text="Set", command =set)
stop_button = Button(root,text="Stop",command=stop)
reset_button =Button(root,text="Reset", command=reset)

# #moving the mouse
def move_mouse_with_delay():
    global running
    start_time = time.time()
    while running:
        elapsed_time =time.time() - start_time
        if elapsed_time >= timer_input.get():
            pyautogui.moveRel(50,0, duration=0.1)
            pyautogui.moveRel(-50,0, duration=0.1)
            start_time = time.time()
            print(running)
#  balancing the delay, timer needs improvement 
        time.sleep(0.05)
        # if not running:
        #     break



#display
my_progress.pack()
stop_button.pack()
reset_button.pack()
set_button.pack()
duration_label.pack()
duration.pack()
root.mainloop()

